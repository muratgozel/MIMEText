{"version":3,"file":"mimetext.browser.cjs.js","sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/browser.ts"],"sourcesContent":["export class MIMETextError extends Error {\n    override name = ''\n    description = ''\n\n    constructor (message: string, description = '') {\n        super(description)\n\n        this.name = message\n        this.description = description\n    }\n}\n","import { MIMETextError } from './MIMETextError.js'\n\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\n    name = ''\n    addr = ''\n    type: MailboxType = 'To'\n\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\n        this.type = config.type\n\n        this.parse(input)\n    }\n\n    getAddrDomain (): string {\n        if (this.addr.includes('@')) {\n            const arr = this.addr.split('@')\n            if (arr.length > 1) return arr[1]!\n        }\n        return ''\n    }\n\n    dump (): string {\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\n    }\n\n    parse (input: MailboxAddrObject | string): this {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr\n            if (typeof input.name === 'string') this.name = input.name\n            if (typeof input.type === 'string') this.type = input.type\n            return this\n        }\n\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim()\n            if (text.startsWith('<') && text.endsWith('>')) {\n                this.addr = text.slice(1, -1)\n                return this\n            }\n            const arr = text.split(' <') as [string, string]\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n            arr[1] = arr[1].slice(0, -1)\n            this.name = arr[0]\n            this.addr = arr[1]\n            return this\n        }\n\n        if (typeof input === 'string') {\n            this.addr = input\n            return this\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\n    }\n\n    isMailboxAddrText (v: unknown): boolean {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\n    }\n\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface MailboxConfig {\n    type: MailboxType\n}\nexport interface MailboxAddrObject {\n    addr: string\n    name?: string\n    type?: MailboxType\n}\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\n","import type { EnvironmentContext } from \"./MIMEMessage\";\nimport { MIMETextError } from \"./MIMETextError.js\";\nimport { Mailbox } from \"./Mailbox.js\";\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext;\n    fields: HeaderField[] = [\n        {\n            name: \"Date\",\n            generator: () =>\n                new Date().toUTCString().replace(/GMT|UTC/gi, \"+0000\"),\n        },\n        {\n            name: \"From\",\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Sender\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Reply-To\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"To\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Cc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Bcc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Message-ID\",\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2);\n                const from = this.fields.filter(\n                    (obj) => obj.name === \"From\",\n                )[0]!.value as Mailbox;\n                const domain = from.getAddrDomain();\n                return \"<\" + randomstr + \"@\" + domain + \">\";\n            },\n        },\n        {\n            name: \"Subject\",\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === \"string\"\n                    ? \"=?utf-8?B?\" + this.envctx.toBase64(v) + \"?=\"\n                    : \"\";\n            },\n        },\n        {\n            name: \"MIME-Version\",\n            generator: () => \"1.0\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        this.envctx = envctx;\n    }\n\n    dump(): string {\n        let lines = \"\";\n\n        for (const field of this.fields) {\n            if (field.disabled) continue;\n            const isValueDefinedByUser =\n                field.value !== undefined && field.value !== null;\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError(\n                    \"MIMETEXT_MISSING_HEADER\",\n                    `The \"${field.name}\" header is required.`,\n                );\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== \"function\")\n                continue;\n            if (!isValueDefinedByUser && typeof field.generator === \"function\")\n                field.value = field.generator();\n            const strval =\n                Object.hasOwn(field, \"dump\") && typeof field.dump === \"function\"\n                    ? field.dump(field.value)\n                    : typeof field.value === \"string\"\n                      ? field.value\n                      : \"\";\n            lines += `${field.name}: ${strval}${this.envctx.eol}`;\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length);\n    }\n\n    toObject(): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value;\n            return memo;\n        }, {});\n    }\n\n    get(name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const ind = this.fields.findIndex(fieldMatcher);\n\n        return ind !== -1 ? this.fields[ind]!.value : undefined;\n    }\n\n    set(name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const isCustomHeader = !this.fields.some(fieldMatcher);\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher);\n            const field = this.fields[ind]!;\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_VALUE\",\n                    `The value for the header \"${name}\" is invalid.`,\n                );\n            }\n            this.fields[ind]!.value = value;\n            return this.fields[ind]!;\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => (typeof v === \"string\" ? v : \"\"),\n        });\n    }\n\n    setCustom(obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== \"string\") {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_FIELD\",\n                    \"Custom header must have a value.\",\n                );\n            }\n            this.fields.push(obj);\n            return obj;\n        }\n\n        throw new MIMETextError(\n            \"MIMETEXT_INVALID_HEADER_FIELD\",\n            \"Invalid input for custom header. It must be in type of HeaderField.\",\n        );\n    }\n\n    validateMailboxSingle(v: unknown): v is Mailbox {\n        return v instanceof Mailbox;\n    }\n\n    validateMailboxMulti(v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v);\n    }\n\n    dumpMailboxMulti(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return this.isArrayOfMailboxes(v)\n            ? v.map(dump).join(`,${this.envctx.eol} `)\n            : v instanceof Mailbox\n              ? dump(v)\n              : \"\";\n    }\n\n    dumpMailboxSingle(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return v instanceof Mailbox ? dump(v) : \"\";\n    }\n\n    isHeaderField(v: unknown): v is HeaderField {\n        const validProps = [\n            \"name\",\n            \"value\",\n            \"dump\",\n            \"required\",\n            \"disabled\",\n            \"generator\",\n            \"custom\",\n        ];\n        if (this.isObject(v)) {\n            const h = v as HeaderField;\n            if (\n                Object.hasOwn(h, \"name\") &&\n                typeof h.name === \"string\" &&\n                h.name.length > 0\n            ) {\n                if (\n                    !Object.keys(h).some((prop) => !validProps.includes(prop))\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    isObject(v: unknown): v is object {\n        return !!v && v.constructor === Object;\n    }\n\n    isArrayOfMailboxes(v: unknown): v is Mailbox[] {\n        return (\n            this.isArray(v) &&\n            v.every((item: unknown) => item instanceof Mailbox)\n        );\n    }\n\n    isArray(v: unknown): v is never[] {\n        return !!v && v.constructor === Array;\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: \"Content-ID\",\n        },\n        {\n            name: \"Content-Type\",\n        },\n        {\n            name: \"Content-Transfer-Encoding\",\n        },\n        {\n            name: \"Content-Disposition\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        super(envctx);\n    }\n}\n\nexport type HeadersObject = Record<\n    string,\n    string | Mailbox | Mailbox[] | undefined\n>;\nexport interface HeaderField {\n    name: string;\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string;\n    value?: string | Mailbox | Mailbox[] | undefined;\n    validate?: (v: unknown) => boolean;\n    required?: boolean;\n    disabled?: boolean;\n    generator?: () => string;\n    custom?: boolean;\n}\n","import type { EnvironmentContext } from './MIMEMessage'\nimport type { Mailbox } from './Mailbox'\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\n\nexport class MIMEMessageContent {\n    envctx: EnvironmentContext\n    headers\n    data\n\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageContentHeader(this.envctx)\n        this.data = data\n        this.setHeaders(headers)\n    }\n\n    dump (): string {\n        const eol = this.envctx.eol\n        return this.headers.dump() + eol + eol + this.data\n    }\n\n    isAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('attachment')\n    }\n\n    isInlineAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('inline')\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n}\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\n\nimport { MIMETextError } from './MIMETextError.js'\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\nimport { Mailbox } from './Mailbox.js'\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext\n    headers: MIMEMessageHeader\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\n    validTypes = ['text/html', 'text/plain']\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\n    messages: MIMEMessageContent[] = []\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageHeader(this.envctx)\n        this.messages = []\n\n        this.generateBoundaries()\n    }\n\n    asRaw (): string {\n        const eol = this.envctx.eol\n        const lines = this.headers.dump()\n\n        const plaintext = this.getMessageByType('text/plain')\n        const html = this.getMessageByType('text/html')\n        const primaryMessage = html ?? (plaintext ?? undefined)\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\n        }\n\n        const hasAttachments = this.hasAttachments()\n        const hasInlineAttachments = this.hasInlineAttachments()\n\n        const structure = hasInlineAttachments && hasAttachments\n            ? 'mixed+related'\n            : hasAttachments\n                ? 'mixed'\n                : hasInlineAttachments\n                    ? 'related'\n                    : plaintext && html\n                        ? 'alternative'\n                        : ''\n\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                '--' + this.boundaries.mixed + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--' + eol +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\n                (plaintext && html ? '' : eol) +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--'\n        } else if (structure === 'alternative') {\n            return lines + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else {\n            return lines + eol + primaryMessage.dump()\n        }\n    }\n\n    asEncoded (): string {\n        return this.envctx.toBase64WebSafe(this.asRaw())\n    }\n\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\n        const eol = this.envctx.eol\n        const primaryMessage = html ?? plaintext\n\n        let data = ''\n\n        if (plaintext && html && !this.hasInlineAttachments() && this.hasAttachments()) {\n            data = '--' + boundary + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                html.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else if (plaintext && html && this.hasInlineAttachments()) {\n            data = '--' + boundary + eol +\n                html.dump()\n        } else if (plaintext && html) {\n            data = '--' + boundary + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + boundary + eol +\n                html.dump()\n        } else {\n            data = '--' + boundary + eol +\n                (primaryMessage!).dump()\n        }\n\n        return data\n    }\n\n    hasInlineAttachments (): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment())\n    }\n\n    hasAttachments (): boolean {\n        return this.messages.some((msg) => msg.isAttachment())\n    }\n\n    getAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getInlineAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getMessageByType (type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\n    }\n\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\n        }\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const contentId = opts.headers['Content-ID']\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\n        }\n\n        const disposition = opts.inline ? 'inline' : 'attachment'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    addMessage (opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const charset = opts.charset ?? 'UTF-8'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\n\n        this.messages.push(msg)\n\n        return msg\n    }\n\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\n        const mailbox = new Mailbox(input, config)\n        this.setHeader('From', mailbox)\n        return mailbox\n    }\n\n    getSender (): Mailbox | undefined {\n        return this.getHeader('From') as Mailbox\n    }\n\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input\n        const recs = arr.map((_input) => new Mailbox(_input, config))\n        this.setHeader(config.type, recs)\n        return recs\n    }\n\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\n    }\n\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setSubject (value: string): string {\n        this.setHeader('subject', value)\n        return value\n    }\n\n    getSubject (): string | undefined {\n        return this.getHeader('subject') as string\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n\n    toBase64 (v: string): string {\n        return this.envctx.toBase64(v)\n    }\n\n    toBase64WebSafe (v: string): string {\n        return this.envctx.toBase64WebSafe(v)\n    }\n\n    generateBoundaries (): void {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        }\n    }\n\n    isArray (v: unknown): v is unknown[] {\n        return (!!v) && (v.constructor === Array)\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string\n    toBase64WebSafe: (v: string) => string\n    eol: string\n    validateContentType: (v: string) => string | false\n}\n\nexport interface Boundaries {\n    mixed: string\n    alt: string\n    related: string\n}\n\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\n\nexport interface ContentHeaders {\n    'Content-Type'?: string\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\n    'Content-Disposition'?: string\n    'Content-ID'?: string\n    [index: string]: string | undefined\n}\n\nexport interface ContentOptions {\n    data: string\n    encoding?: ContentTransferEncoding\n    contentType: string\n    headers?: ContentHeaders\n    charset?: string\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean\n    filename: string\n}\n","import { Base64 } from 'js-base64'\nimport { MIMEMessage } from '../MIMEMessage.js'\n\nconst envctx = {\n    toBase64: function toBase64 (data: string) {\n        return Base64.encode(data)\n    },\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\n        return Base64.encodeURI(data)\n    },\n    eol: '\\r\\n',\n    validateContentType: (v: string): string | false => {\n        return v.length > 0 ? v : false\n    }\n}\n\nexport function createMimeMessage (): MIMEMessage {\n    return new MIMEMessage(envctx)\n}\n\nexport { MIMEMessage } from '../MIMEMessage.js'\nexport { Mailbox } from '../Mailbox.js'\nexport { MIMETextError } from '../MIMETextError.js'\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\n\nexport type * from '../MIMEMessage.js'\nexport type * from '../Mailbox.js'\nexport type * from '../MIMETextError.js'\nexport type * from '../MIMEMessageHeader.js'\nexport type * from '../MIMEMessageContent.js'\n"],"names":["MIMETextError","Error","constructor","message","description","arguments","length","undefined","super","_defineProperty","this","name","Mailbox","input","config","type","parse","getAddrDomain","addr","includes","arr","split","dump","concat","isMailboxAddrObject","isMailboxAddrText","text","_trimInstanceProperty","call","startsWith","endsWith","slice","test","v","reSpecCompliantAddr","isObject","Object","hasOwn","MIMEMessageHeader","envctx","generator","Date","toUTCString","replace","required","validate","validateMailboxSingle","dumpMailboxSingle","validateMailboxMulti","dumpMailboxMulti","Math","random","toString","fields","filter","obj","value","toBase64","lines","field","disabled","isValueDefinedByUser","strval","eol","toObject","reduce","memo","item","get","ind","findIndex","toLowerCase","set","fieldMatcher","some","setCustom","custom","isHeaderField","push","isArrayOfMailboxes","map","join","validProps","h","keys","prop","isArray","every","Array","MIMEMessageContentHeader","MIMEMessageContent","data","headers","setHeaders","isAttachment","disposition","isInlineAttachment","setHeader","getHeader","getHeaders","MIMEMessage","mixed","alt","related","messages","generateBoundaries","asRaw","plaintext","getMessageByType","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","getAttachments","a","boundaries","inlineAttachments","getInlineAttachments","dumpTextContent","asEncoded","toBase64WebSafe","boundary","msg","matcher","addAttachment","opts","_opts$headers$Content","_ref","_opts$headers$Content2","filename","contentType","validateContentType","encoding","validContentTransferEncodings","contentId","inline","assign","_addMessage","addMessage","_opts$headers$Content3","_ref2","_opts$headers$Content4","_opts$charset","validTypes","charset","setSender","mailbox","getSender","setRecipients","recs","_input","getRecipients","setRecipient","setTo","setCc","setBcc","setSubject","getSubject","Base64","encode","encodeURI"],"mappings":"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"}