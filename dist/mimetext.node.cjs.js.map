{"version":3,"file":"mimetext.node.cjs.js","sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/node.ts"],"sourcesContent":["export class MIMETextError extends Error {\n    override name = ''\n    description = ''\n\n    constructor (message: string, description = '') {\n        super(description)\n\n        this.name = message\n        this.description = description\n    }\n}\n","import { MIMETextError } from './MIMETextError.js'\n\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\n    name = ''\n    addr = ''\n    type: MailboxType = 'To'\n\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\n        this.type = config.type\n\n        this.parse(input)\n    }\n\n    getAddrDomain (): string {\n        if (this.addr.includes('@')) {\n            const arr = this.addr.split('@')\n            if (arr.length > 1) return arr[1]!\n        }\n        return ''\n    }\n\n    dump (): string {\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\n    }\n\n    parse (input: MailboxAddrObject | string): this {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr\n            if (typeof input.name === 'string') this.name = input.name\n            if (typeof input.type === 'string') this.type = input.type\n            return this\n        }\n\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim()\n            if (text.startsWith('<') && text.endsWith('>')) {\n                this.addr = text.slice(1, -1)\n                return this\n            }\n            const arr = text.split(' <') as [string, string]\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n            arr[1] = arr[1].slice(0, -1)\n            this.name = arr[0]\n            this.addr = arr[1]\n            return this\n        }\n\n        if (typeof input === 'string') {\n            this.addr = input\n            return this\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\n    }\n\n    isMailboxAddrText (v: unknown): boolean {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\n    }\n\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface MailboxConfig {\n    type: MailboxType\n}\nexport interface MailboxAddrObject {\n    addr: string\n    name?: string\n    type?: MailboxType\n}\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\n","import type { EnvironmentContext } from \"./MIMEMessage\";\nimport { MIMETextError } from \"./MIMETextError.js\";\nimport { Mailbox } from \"./Mailbox.js\";\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext;\n    fields: HeaderField[] = [\n        {\n            name: \"Date\",\n            generator: () =>\n                new Date().toUTCString().replace(/GMT|UTC/gi, \"+0000\"),\n        },\n        {\n            name: \"From\",\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Sender\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Reply-To\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"To\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Cc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Bcc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Message-ID\",\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2);\n                const from = this.fields.filter(\n                    (obj) => obj.name === \"From\",\n                )[0]!.value as Mailbox;\n                const domain = from.getAddrDomain();\n                return \"<\" + randomstr + \"@\" + domain + \">\";\n            },\n        },\n        {\n            name: \"Subject\",\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === \"string\"\n                    ? \"=?utf-8?B?\" + this.envctx.toBase64(v) + \"?=\"\n                    : \"\";\n            },\n        },\n        {\n            name: \"MIME-Version\",\n            generator: () => \"1.0\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        this.envctx = envctx;\n    }\n\n    dump(): string {\n        let lines = \"\";\n\n        for (const field of this.fields) {\n            if (field.disabled) continue;\n            const isValueDefinedByUser =\n                field.value !== undefined && field.value !== null;\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError(\n                    \"MIMETEXT_MISSING_HEADER\",\n                    `The \"${field.name}\" header is required.`,\n                );\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== \"function\")\n                continue;\n            if (!isValueDefinedByUser && typeof field.generator === \"function\")\n                field.value = field.generator();\n            const strval =\n                Object.hasOwn(field, \"dump\") && typeof field.dump === \"function\"\n                    ? field.dump(field.value)\n                    : typeof field.value === \"string\"\n                      ? field.value\n                      : \"\";\n            lines += `${field.name}: ${strval}${this.envctx.eol}`;\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length);\n    }\n\n    toObject(): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value;\n            return memo;\n        }, {});\n    }\n\n    get(name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const ind = this.fields.findIndex(fieldMatcher);\n\n        return ind !== -1 ? this.fields[ind]!.value : undefined;\n    }\n\n    set(name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const isCustomHeader = !this.fields.some(fieldMatcher);\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher);\n            const field = this.fields[ind]!;\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_VALUE\",\n                    `The value for the header \"${name}\" is invalid.`,\n                );\n            }\n            this.fields[ind]!.value = value;\n            return this.fields[ind]!;\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => (typeof v === \"string\" ? v : \"\"),\n        });\n    }\n\n    setCustom(obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== \"string\") {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_FIELD\",\n                    \"Custom header must have a value.\",\n                );\n            }\n            this.fields.push(obj);\n            return obj;\n        }\n\n        throw new MIMETextError(\n            \"MIMETEXT_INVALID_HEADER_FIELD\",\n            \"Invalid input for custom header. It must be in type of HeaderField.\",\n        );\n    }\n\n    validateMailboxSingle(v: unknown): v is Mailbox {\n        return v instanceof Mailbox;\n    }\n\n    validateMailboxMulti(v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v);\n    }\n\n    dumpMailboxMulti(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return this.isArrayOfMailboxes(v)\n            ? v.map(dump).join(`,${this.envctx.eol} `)\n            : v instanceof Mailbox\n              ? dump(v)\n              : \"\";\n    }\n\n    dumpMailboxSingle(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return v instanceof Mailbox ? dump(v) : \"\";\n    }\n\n    isHeaderField(v: unknown): v is HeaderField {\n        const validProps = [\n            \"name\",\n            \"value\",\n            \"dump\",\n            \"required\",\n            \"disabled\",\n            \"generator\",\n            \"custom\",\n        ];\n        if (this.isObject(v)) {\n            const h = v as HeaderField;\n            if (\n                Object.hasOwn(h, \"name\") &&\n                typeof h.name === \"string\" &&\n                h.name.length > 0\n            ) {\n                if (\n                    !Object.keys(h).some((prop) => !validProps.includes(prop))\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    isObject(v: unknown): v is object {\n        return !!v && v.constructor === Object;\n    }\n\n    isArrayOfMailboxes(v: unknown): v is Mailbox[] {\n        return (\n            this.isArray(v) &&\n            v.every((item: unknown) => item instanceof Mailbox)\n        );\n    }\n\n    isArray(v: unknown): v is never[] {\n        return !!v && v.constructor === Array;\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: \"Content-ID\",\n        },\n        {\n            name: \"Content-Type\",\n        },\n        {\n            name: \"Content-Transfer-Encoding\",\n        },\n        {\n            name: \"Content-Disposition\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        super(envctx);\n    }\n}\n\nexport type HeadersObject = Record<\n    string,\n    string | Mailbox | Mailbox[] | undefined\n>;\nexport interface HeaderField {\n    name: string;\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string;\n    value?: string | Mailbox | Mailbox[] | undefined;\n    validate?: (v: unknown) => boolean;\n    required?: boolean;\n    disabled?: boolean;\n    generator?: () => string;\n    custom?: boolean;\n}\n","import type { EnvironmentContext } from './MIMEMessage'\nimport type { Mailbox } from './Mailbox'\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\n\nexport class MIMEMessageContent {\n    envctx: EnvironmentContext\n    headers\n    data\n\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageContentHeader(this.envctx)\n        this.data = data\n        this.setHeaders(headers)\n    }\n\n    dump (): string {\n        const eol = this.envctx.eol\n        return this.headers.dump() + eol + eol + this.data\n    }\n\n    isAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('attachment')\n    }\n\n    isInlineAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('inline')\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n}\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\n\nimport { MIMETextError } from './MIMETextError.js'\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\nimport { Mailbox } from './Mailbox.js'\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext\n    headers: MIMEMessageHeader\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\n    validTypes = ['text/html', 'text/plain']\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\n    messages: MIMEMessageContent[] = []\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageHeader(this.envctx)\n        this.messages = []\n\n        this.generateBoundaries()\n    }\n\n    asRaw (): string {\n        const eol = this.envctx.eol\n        const lines = this.headers.dump()\n\n        const plaintext = this.getMessageByType('text/plain')\n        const html = this.getMessageByType('text/html')\n        const primaryMessage = html ?? (plaintext ?? undefined)\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\n        }\n\n        const hasAttachments = this.hasAttachments()\n        const hasInlineAttachments = this.hasInlineAttachments()\n\n        const structure = hasInlineAttachments && hasAttachments\n            ? 'mixed+related'\n            : hasAttachments\n                ? 'mixed'\n                : hasInlineAttachments\n                    ? 'related'\n                    : plaintext && html\n                        ? 'alternative'\n                        : ''\n\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                '--' + this.boundaries.mixed + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--' + eol +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\n                (plaintext && html ? '' : eol) +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--'\n        } else if (structure === 'alternative') {\n            return lines + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else {\n            return lines + eol + primaryMessage.dump()\n        }\n    }\n\n    asEncoded (): string {\n        return this.envctx.toBase64WebSafe(this.asRaw())\n    }\n\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\n        const eol = this.envctx.eol\n        const primaryMessage = html ?? plaintext\n\n        let data = ''\n\n        if (plaintext && html && !this.hasInlineAttachments() && this.hasAttachments()) {\n            data = '--' + boundary + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                html.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else if (plaintext && html && this.hasInlineAttachments()) {\n            data = '--' + boundary + eol +\n                html.dump()\n        } else if (plaintext && html) {\n            data = '--' + boundary + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + boundary + eol +\n                html.dump()\n        } else {\n            data = '--' + boundary + eol +\n                (primaryMessage!).dump()\n        }\n\n        return data\n    }\n\n    hasInlineAttachments (): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment())\n    }\n\n    hasAttachments (): boolean {\n        return this.messages.some((msg) => msg.isAttachment())\n    }\n\n    getAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getInlineAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getMessageByType (type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\n    }\n\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\n        }\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const contentId = opts.headers['Content-ID']\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\n        }\n\n        const disposition = opts.inline ? 'inline' : 'attachment'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    addMessage (opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const charset = opts.charset ?? 'UTF-8'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\n\n        this.messages.push(msg)\n\n        return msg\n    }\n\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\n        const mailbox = new Mailbox(input, config)\n        this.setHeader('From', mailbox)\n        return mailbox\n    }\n\n    getSender (): Mailbox | undefined {\n        return this.getHeader('From') as Mailbox\n    }\n\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input\n        const recs = arr.map((_input) => new Mailbox(_input, config))\n        this.setHeader(config.type, recs)\n        return recs\n    }\n\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\n    }\n\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setSubject (value: string): string {\n        this.setHeader('subject', value)\n        return value\n    }\n\n    getSubject (): string | undefined {\n        return this.getHeader('subject') as string\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n\n    toBase64 (v: string): string {\n        return this.envctx.toBase64(v)\n    }\n\n    toBase64WebSafe (v: string): string {\n        return this.envctx.toBase64WebSafe(v)\n    }\n\n    generateBoundaries (): void {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        }\n    }\n\n    isArray (v: unknown): v is unknown[] {\n        return (!!v) && (v.constructor === Array)\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string\n    toBase64WebSafe: (v: string) => string\n    eol: string\n    validateContentType: (v: string) => string | false\n}\n\nexport interface Boundaries {\n    mixed: string\n    alt: string\n    related: string\n}\n\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\n\nexport interface ContentHeaders {\n    'Content-Type'?: string\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\n    'Content-Disposition'?: string\n    'Content-ID'?: string\n    [index: string]: string | undefined\n}\n\nexport interface ContentOptions {\n    data: string\n    encoding?: ContentTransferEncoding\n    contentType: string\n    headers?: ContentHeaders\n    charset?: string\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean\n    filename: string\n}\n","import { EOL } from 'node:os'\nimport * as mime from 'mime-types'\nimport { MIMEMessage } from '../MIMEMessage.js'\n\nconst envctx = {\n    toBase64: function toBase64 (data: string) {\n        return (Buffer.from(data)).toString('base64')\n    },\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\n        return (Buffer.from(data)).toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=+$/, '')\n    },\n    eol: EOL,\n    validateContentType: (v: string): string | false => {\n        return mime.contentType(v)\n    }\n}\n\nexport function createMimeMessage (): MIMEMessage {\n    return new MIMEMessage(envctx)\n}\n\nexport { MIMEMessage } from '../MIMEMessage.js'\nexport { Mailbox } from '../Mailbox.js'\nexport { MIMETextError } from '../MIMETextError.js'\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\n\nexport type * from '../MIMEMessage.js'\nexport type * from '../Mailbox.js'\nexport type * from '../MIMETextError.js'\nexport type * from '../MIMEMessageHeader.js'\nexport type * from '../MIMEMessageContent.js'\n"],"names":["MIMETextError","Error","name","description","constructor","message","super","this","Mailbox","reSpecCompliantAddr","addr","type","input","config","parse","getAddrDomain","includes","arr","split","length","dump","isMailboxAddrObject","isMailboxAddrText","text","_trimInstanceProperty","call","startsWith","endsWith","slice","test","v","isObject","Object","hasOwn","MIMEMessageHeader","fields","generator","Date","toUTCString","replace","required","validate","validateMailboxSingle","dumpMailboxSingle","validateMailboxMulti","dumpMailboxMulti","Math","random","toString","filter","obj","value","envctx","toBase64","lines","field","disabled","isValueDefinedByUser","undefined","strval","eol","toObject","reduce","memo","item","get","ind","findIndex","toLowerCase","set","fieldMatcher","some","setCustom","custom","isHeaderField","push","isArrayOfMailboxes","map","join","validProps","h","keys","prop","isArray","every","Array","MIMEMessageContentHeader","MIMEMessageContent","data","headers","setHeaders","isAttachment","disposition","isInlineAttachment","setHeader","getHeader","getHeaders","MIMEMessage","boundaries","mixed","alt","related","validTypes","validContentTransferEncodings","messages","generateBoundaries","asRaw","plaintext","getMessageByType","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","getAttachments","a","inlineAttachments","getInlineAttachments","dumpTextContent","asEncoded","toBase64WebSafe","boundary","msg","matcher","addAttachment","opts","filename","contentType","validateContentType","encoding","contentId","inline","assign","_addMessage","addMessage","charset","setSender","mailbox","getSender","setRecipients","recs","_input","getRecipients","setRecipient","setTo","setCc","setBcc","setSubject","getSubject","Buffer","from","EOL","mime"],"mappings":"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"}